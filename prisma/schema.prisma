generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum ProduceType {
  Vegetable
  SpecialtyVegetable
  Fruit
  Berry
  StoneFruit
  SpecialtyFruit
  EdibleFlower
  Herb
}

enum AvailabilityType {
  Available
  Limited
  Unavailable
  Imported
  LimitedImported
}

model Produce {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  title          String
  type           ProduceType
  description    String       @default("")
  image          String       @default("")
  authorId       String
  availability   Availability @relation(fields: [availabilityId], references: [id])
  availabilityId Int
  Ingredient     Ingredient[]
  Prices         Price[]
  seasonality    Seasonality? @relation(fields: [seasonalityId], references: [id])
  seasonalityId  Int?

  @@index([authorId])
  @@index([availabilityId])
  @@index([seasonalityId])
}

model Seasonality {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String    @unique
  january   String
  february  String
  march     String
  april     String
  may       String
  june      String
  july      String
  august    String
  september String
  october   String
  november  String
  december  String
  Produce   Produce[]
}

model Availability {
  id        Int              @id @default(autoincrement())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  january   AvailabilityType
  february  AvailabilityType
  march     AvailabilityType
  april     AvailabilityType
  may       AvailabilityType
  june      AvailabilityType
  july      AvailabilityType
  august    AvailabilityType
  september AvailabilityType
  october   AvailabilityType
  november  AvailabilityType
  december  AvailabilityType
  Produce   Produce[]
}

model Recipe {
  id                 Int                 @id @default(autoincrement())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  title              String
  byline             String              @default("")
  serves             String              @default("")
  prepTime           String              @default("")
  cookTime           String              @default("")
  totalTime          String              @default("")
  sourceURL          String              @default("")
  description        String              @default("") @db.Text
  image              String              @default("")
  authorId           String
  ingredientSegments IngredientSegment[]
  instructions       Instruction[]
  tags               Tag[]
  Favourite          Favourite[]

  @@index([authorId])
}

model Price {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  name       String
  year_month String
  price      Float
  Produce    Produce[]
}

model Favourite {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  recipeId  Int
  rating    Int?
  completed Boolean  @default(false)

  recipe Recipe @relation(fields: [recipeId], references: [id])

  @@id([userId, recipeId])
  @@index([recipeId])
}

model IngredientSegment {
  id          Int          @id @default(autoincrement())
  title       String
  ingredients Ingredient[]
  recipe      Recipe       @relation(fields: [recipeId], references: [id])
  recipeId    Int

  @@index([recipeId])
}

model Ingredient {
  id        Int               @id @default(autoincrement())
  content   String
  segment   IngredientSegment @relation(fields: [segmentId], references: [id])
  segmentId Int
  produce   Produce?          @relation(fields: [produceId], references: [id])
  produceId Int?

  @@index([segmentId])
  @@index([produceId])
}

model Instruction {
  id       Int    @id @default(autoincrement())
  title    String
  content  String @db.Text
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId Int

  @@index([recipeId])
}

model Tag {
  id     Int      @id @default(autoincrement())
  name   String   @unique
  recipe Recipe[]
}
